{"Name":"Get Sample IOCs","Description":"Retrieve Indicator of Compromise values for a given sample id","Script":"# Import built-in libraries\nimport json\n\n# Import Siemplify libraries\nfrom SiemplifyAction import SiemplifyAction\nfrom SiemplifyUtils import output_handler\nfrom SiemplifyDataModel import InsightSeverity, InsightType\nfrom ScriptResult import EXECUTION_STATE_COMPLETED, EXECUTION_STATE_FAILED\n\n# Import conntector related libraries\nfrom Conf import VMRayConfig, INTEGRATION_NAME, GET_SAMPLE_IOC_SCRIPT_NAME\nfrom UtilsManager import csv_to_list\nfrom VMRayApiManager import VMRay\n\ndef prepare_iocs_for_insight(response_dict):\n    message = \"\"\n    for verdict in response_dict:\n        message += \"<br><span style=\\\"color:red;\\\"><strong>%s IOC's</strong></span>\\n\" % verdict.upper()\n    \n        ioc_data = response_dict[verdict]\n    \n        for ioc_type in ioc_data:\n            message += \"<br><strong>%s (%d)</strong>\\n\" % (ioc_type.upper(), len(ioc_data[ioc_type]))\n    \n            iocs = ioc_data[ioc_type]\n    \n            for ioc in iocs:\n                message += \"<hr>\"\n                for key in ioc:\n                    if key == \"categories\" or key == \"classifications\" or key == \"threat_names\":\n                        if len(ioc[key]) > 0:\n                            message += \"&emsp;<strong>%s</strong>: %s\\n\" % (key.upper(), \",\".join(ioc[key]))\n                    elif type(ioc[key]) == list:\n                        if len(ioc[key]) > 0:\n                            message += \"&emsp;<strong>%s</strong>\\n\" % key.upper()\n                            for value in ioc[key]:\n                                if type(value) == dict:\n                                    for k in value:\n                                        message += \"&emsp;&emsp;<strong>%s</strong>: %s\\n\" % (k, value[k])\n                                else:\n                                    message += \"&emsp;&emsp;%s\\n\" % value\n                    elif type(ioc[key]) == str:\n                        if len(ioc[key]) > 0:\n                            message += \"&emsp;<strong>%s</strong>: %s\\n\" % (key.upper(), ioc[key])\n    return message\n\n@output_handler\ndef main():\n    siemplify = SiemplifyAction()\n    siemplify.script_name = GET_SAMPLE_IOC_SCRIPT_NAME\n    \n    siemplify.LOGGER.info(\"----------------- Main - Param Init -----------------\")\n    \n    # Initializing integration parameters for Get Sample IOC Action\n    api_key = siemplify.extract_configuration_param(provider_name=INTEGRATION_NAME, \n                                                    param_name=\"API_KEY\",\n                                                    input_type=str,\n                                                    is_mandatory=True,\n                                                    print_value=False)\n    url = siemplify.extract_configuration_param(provider_name=INTEGRATION_NAME,\n                                                param_name=\"URL\",\n                                                input_type=str,\n                                                is_mandatory=True,\n                                                print_value=True)\n    ssl_verify = siemplify.extract_configuration_param(provider_name=INTEGRATION_NAME, \n                                                       param_name=\"SSL_VERIFY\",\n                                                       input_type=bool,\n                                                       is_mandatory=True,\n                                                       print_value=True)\n    \n    # initializing action specific parameters for Get Sample IOC Action\n    sample_id = siemplify.extract_action_param(param_name=\"SAMPLE_ID\",\n                                                input_type=str,\n                                                is_mandatory=True,\n                                                print_value=True)\n    selected_ioc_verdicts = siemplify.extract_action_param(param_name=\"SELECTED_IOC_VERDICTS\",\n                                                input_type=str,\n                                                is_mandatory=False,\n                                                print_value=True)\n    selected_ioc_types = siemplify.extract_action_param(param_name=\"SELECTED_IOC_TYPES\",\n                                                input_type=str,\n                                                is_mandatory=False,\n                                                print_value=True)\n    create_insight = siemplify.extract_action_param(param_name=\"CREATE_INSIGHT\",\n                                                input_type=bool,\n                                                is_mandatory=False,\n                                                print_value=True)\n                                                \n    VMRayConfig.API_KEY = api_key\n    VMRayConfig.URL = url\n    VMRayConfig.SSL_VERIFY = ssl_verify\n    \n    # check and initialize given parameters to config\n    if selected_ioc_verdicts is not None and len(selected_ioc_verdicts) > 0:\n        VMRayConfig.SELECTED_IOC_VERDICTS = csv_to_list(selected_ioc_verdicts)\n    \n    if selected_ioc_types is not None and len(selected_ioc_types) > 0:\n        VMRayConfig.SELECTED_IOC_TYPES = csv_to_list(selected_ioc_types)\n    \n    siemplify.LOGGER.info(\"----------------- Main - Started -----------------\")\n    \n    # Initializing VMRay API Instance\n    vmray = VMRay(siemplify.LOGGER, VMRayConfig)\n    \n    try:\n        # Authenticating VMRay API\n        vmray.authenticate()\n        \n        # Doing healtcheck for VMRay API endpoint\n        vmray.healthcheck()\n        \n        # Retrieving sample IOCs with given sample_id\n        sample_iocs = vmray.get_sample_iocs(sample_id)\n        \n        # Checking and parsing sample IOCs\n        if sample_iocs is not None:\n            \n            # Parsing sample IOCs values\n            parsed_iocs = vmray.parse_sample_iocs(sample_iocs)\n            \n            # used to flag back to siemplify system, the action final status\n            status = EXECUTION_STATE_COMPLETED  \n        \n            # human readable message, showed in UI as the action result\n            output_message = \"Sample IOCs retrieved successfully for %s\" % sample_id\n        \n            # Set a simple result value, used for playbook if\\else and placeholders.\n            result_value = True\n            \n            # Adding sample metadata to result json\n            siemplify.result.add_result_json(json.dumps({\"sample_iocs\":parsed_iocs}))\n            \n            if create_insight:\n                siemplify.LOGGER.info(\"Creating case insight for found IOC's.\")\n                \n                title = \"VMRay Indicator of Compromise Values for Sample %s\" % sample_id\n                \n                try:\n                    message = prepare_iocs_for_insight(parsed_iocs)\n                    \n                    siemplify.create_case_insight(triggered_by=INTEGRATION_NAME,\n                                      title=title,\n                                      content=message,\n                                      entity_identifier=\"\",\n                                      severity=1,\n                                      insight_type=InsightType.General)\n                except Exception as err:\n                    siemplify.LOGGER.error(\"Insight creation failed. Error: %s\" % err)\n    \n            siemplify.LOGGER.info(\"%s action finished successfully.\" % GET_SAMPLE_IOC_SCRIPT_NAME)\n        else:\n            # used to flag back to siemplify system, the action final status\n            status = EXECUTION_STATE_FAILED  \n        \n            # human readable message, showed in UI as the action result\n            output_message = \"No IOC for %s was found in VMRay database.\" % sample_id\n        \n            # Set a simple result value, used for playbook if\\else and placeholders.\n            result_value = False\n            \n            siemplify.LOGGER.info(\"%s action failed.\" % GET_SAMPLE_IOC_SCRIPT_NAME)\n    except Exception as err:\n        # used to flag back to siemplify system, the action final status\n        status = EXECUTION_STATE_FAILED\n        \n        # human readable message, showed in UI as the action result\n        output_message = \"No IOC for %s was found in VMRay database. Error: %s\" % (sample_id, err)\n        \n        # Set a simple result value, used for playbook if\\else and placeholders.\n        result_value = False\n        \n        siemplify.LOGGER.error(\"%s action finished with error.\" % GET_SAMPLE_IOC_SCRIPT_NAME)\n        siemplify.LOGGER.exception(err)\n\n    siemplify.LOGGER.info(\"----------------- Main - Finished -----------------\")\n\n    siemplify.LOGGER.info(\"\\n  status: %s\\n  result_value: %s\\n  output_message: %s\" % (status, result_value, output_message))\n    siemplify.end(output_message, result_value, status)\n\n\nif __name__ == \"__main__\":\n    main()\n","IntegrationIdentifier":"VMRayCustomIntegration","ScriptResultName":"is_success","DynamicResultsMetadata":[{"ResultName":"JsonResult","ResultExample":"{\"sample_iocs\": {\"malicious\": {\"files\": [{\"categories\": [\"Sample File\"], \"classifications\": [], \"filenames\": [\"C:\\\\Users\\\\BeAKf9m3\\\\Desktop\\\\pafish64.exe\", \"C:\\\\Users\\\\SlyxCM\\\\Desktop\\\\pafish64.exe\", \"C:\\\\Users\\\\WhuOXYsD\\\\Desktop\\\\pafish64.exe\", \"C:\\\\Users\\\\aMzwhoQmcv2J\\\\Desktop\\\\pafish64.exe\", \"C:\\\\Users\\\\vnPxSFeoNN\\\\Desktop\\\\pafish64.exe\", \"pafish64.exe\"], \"hashes\": [{\"imp_hash\": \"6b8cf599a34a9fd7f0f7abd7b1490e9c\", \"md5_hash\": \"4b6229d1b32d7346cf4c8312a8bc7925\", \"sha1_hash\": \"4d83e18a7e1650b4f9bb5e866ea4ad97a21522bd\", \"sha256_hash\": \"ff24b9da6cddd77f8c19169134eb054130567825eee1008b5a32244e1028e76f\", \"ssdeep_hash\": \"3072:wgjIzC10pKQ6PbNehdv3I0lmPendNyrOMGTkrNRD:wgSCuMDendVMGTuNR\"}], \"parent_files\": [], \"parent_processes\": [\"\\\"C:\\\\Users\\\\BeAKf9m3\\\\Desktop\\\\pafish64.exe\\\" \", \"\\\"C:\\\\Users\\\\SlyxCM\\\\Desktop\\\\pafish64.exe\\\" \", \"\\\"C:\\\\Users\\\\WhuOXYsD\\\\Desktop\\\\pafish64.exe\\\" \", \"\\\"C:\\\\Users\\\\aMzwhoQmcv2J\\\\Desktop\\\\pafish64.exe\\\" \", \"\\\"C:\\\\Users\\\\vnPxSFeoNN\\\\Desktop\\\\pafish64.exe\\\" \"], \"verdict\": \"malicious\", \"operations\": [\"Access\"]}], \"processes\": [{\"classifications\": [], \"verdict\": \"malicious\", \"cmd_line\": \"\\\"C:\\\\Users\\\\aMzwhoQmcv2J\\\\Desktop\\\\pafish64.exe\\\" \", \"image_names\": [\"c:\\\\users\\\\amzwhoqmcv2j\\\\desktop\\\\pafish64.exe\"], \"parent_processes\": [\"\"], \"parent_processes_names\": [\"\"], \"process_names\": [\"pafish64.exe\"], \"threat_names\": [\"Trojan.GenericKD.48303001\"]}, {\"classifications\": [], \"verdict\": \"malicious\", \"cmd_line\": \"\\\"C:\\\\Users\\\\SlyxCM\\\\Desktop\\\\pafish64.exe\\\" \", \"image_names\": [\"c:\\\\users\\\\slyxcm\\\\desktop\\\\pafish64.exe\"], \"parent_processes\": [\"\"], \"parent_processes_names\": [\"\"], \"process_names\": [\"pafish64.exe\"], \"threat_names\": [\"Trojan.GenericKD.48303001\"]}, {\"classifications\": [], \"verdict\": \"malicious\", \"cmd_line\": \"\\\"C:\\\\Users\\\\WhuOXYsD\\\\Desktop\\\\pafish64.exe\\\" \", \"image_names\": [\"c:\\\\users\\\\whuoxysd\\\\desktop\\\\pafish64.exe\"], \"parent_processes\": [\"\"], \"parent_processes_names\": [\"\"], \"process_names\": [\"pafish64.exe\"], \"threat_names\": [\"Trojan.GenericKD.48303001\"]}, {\"classifications\": [], \"verdict\": \"malicious\", \"cmd_line\": \"\\\"C:\\\\Users\\\\vnPxSFeoNN\\\\Desktop\\\\pafish64.exe\\\" \", \"image_names\": [\"c:\\\\users\\\\vnpxsfeonn\\\\desktop\\\\pafish64.exe\"], \"parent_processes\": [\"\"], \"parent_processes_names\": [\"\"], \"process_names\": [\"pafish64.exe\"], \"threat_names\": [\"Trojan.GenericKD.48303001\"]}, {\"classifications\": [], \"verdict\": \"malicious\", \"cmd_line\": \"\\\"C:\\\\Users\\\\BeAKf9m3\\\\Desktop\\\\pafish64.exe\\\" \", \"image_names\": [\"c:\\\\users\\\\beakf9m3\\\\desktop\\\\pafish64.exe\"], \"parent_processes\": [\"\"], \"parent_processes_names\": [\"\"], \"process_names\": [\"pafish64.exe\"], \"threat_names\": [\"Trojan.GenericKD.48303001\"]}]}, \"suspicious\": {}}}\r\n","ShowResult":true}],"Creator":"dfe2ce81-dcad-4920-9dd4-7f9876a5abea","IsEnabled":true,"IsCustom":true,"IsSystem":false,"Version":29.0,"TimeoutSeconds":60,"IsAsync":false,"AsyncPollingIntervalInSeconds":3600,"TotalIntervalTimeoutForAsyncInSeconds":86400,"Parameters":[{"CustomActionId":0,"IsMandatory":true,"DefaultValue":"DEFAULT_VALUE","Description":"Identifier of submitted sample","Name":"SAMPLE_ID","Value":"DEFAULT_VALUE","Type":0,"OptionalValues":null,"OptionalValuesJson":null},{"CustomActionId":0,"IsMandatory":false,"DefaultValue":"malicious,suspicious","Description":"Selected verdicts of IOCs (comma seperated string)","Name":"SELECTED_IOC_VERDICTS","Value":"malicious,suspicious","Type":0,"OptionalValues":null,"OptionalValuesJson":null},{"CustomActionId":0,"IsMandatory":false,"DefaultValue":"domains,files,filenames,ips,mutexes,processes,registry,urls","Description":"Selected types of IOCs (comma seperated string)","Name":"SELECTED_IOC_TYPES","Value":"domains,files,filenames,ips,mutexes,processes,registry,urls","Type":0,"OptionalValues":null,"OptionalValuesJson":null},{"CustomActionId":0,"IsMandatory":false,"DefaultValue":"false","Description":"Boolean value to determine creation of case insight","Name":"CREATE_INSIGHT","Value":"false","Type":1,"OptionalValues":null,"OptionalValuesJson":null}],"DefaultResultValue":"Get Sample IOCs Action timeout exceeded.","PythonVersion":"None","SimulationData":{"Entities":null},"SimulationDataJson":null}