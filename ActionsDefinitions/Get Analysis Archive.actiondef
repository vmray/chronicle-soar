{"Name":"Get Analysis Archive","Description":"Retrieve analysis archive file for a given sample or analysis id","Script":"# Import built-in libraries\nimport json\nimport sys\n\n# Import Siemplify libraries\nfrom SiemplifyAction import SiemplifyAction\nfrom SiemplifyUtils import output_handler\nfrom ScriptResult import EXECUTION_STATE_COMPLETED, EXECUTION_STATE_FAILED\n\n# Import conntector related libraries\nfrom Conf import VMRayConfig, INTEGRATION_NAME, GET_ANALYSIS_ARCHIVE_SCRIPT_NAME\nfrom VMRayApiManager import VMRay\nfrom UtilsManager import binary_to_base64, build_analysis_archive_download_url\n\n\n@output_handler\ndef main():\n    siemplify = SiemplifyAction()\n    siemplify.script_name = GET_ANALYSIS_ARCHIVE_SCRIPT_NAME\n    \n    siemplify.LOGGER.info(\"----------------- Main - Param Init -----------------\")\n    \n    # Initializing integration parameters for Get Analysis Archive Action\n    api_key = siemplify.extract_configuration_param(provider_name=INTEGRATION_NAME, \n                                                    param_name=\"API_KEY\",\n                                                    input_type=str,\n                                                    is_mandatory=True,\n                                                    print_value=False)\n    url = siemplify.extract_configuration_param(provider_name=INTEGRATION_NAME,\n                                                param_name=\"URL\",\n                                                input_type=str,\n                                                is_mandatory=True,\n                                                print_value=True)\n    ssl_verify = siemplify.extract_configuration_param(provider_name=INTEGRATION_NAME, \n                                                       param_name=\"SSL_VERIFY\",\n                                                       input_type=bool,\n                                                       is_mandatory=True,\n                                                       print_value=True)\n    \n    # initializing action specific parameters for Get Analysis Archive Action\n    sample_id = siemplify.extract_action_param(param_name=\"SAMPLE_ID\",\n                                                input_type=str,\n                                                is_mandatory=False,\n                                                print_value=True)\n    analysis_id = siemplify.extract_action_param(param_name=\"ANALYSIS_ID\",\n                                                input_type=str,\n                                                is_mandatory=False,\n                                                print_value=True)\n                                                \n    VMRayConfig.API_KEY = api_key\n    VMRayConfig.URL = url\n    VMRayConfig.SSL_VERIFY = ssl_verify\n    \n    is_analysis_id_set = False\n    is_sample_id_set = False\n    \n    # check and initialize given parameters\n    if analysis_id is not None and len(analysis_id) > 0:\n        is_analysis_id_set = True\n    \n    if sample_id is not None and len(sample_id) > 0:\n        is_sample_id_set = True\n        \n    if not is_sample_id_set and not is_analysis_id_set:\n        # used to flag back to siemplify system, the action final status\n        status = EXECUTION_STATE_FAILED  \n    \n        # human readable message, showed in UI as the action result\n        output_message = \"One of SAMPLE_ID or ANALYSIS_ID parameter must be set to run this action.\"\n    \n        # Set a simple result value, used for playbook if\\else and placeholders.\n        result_value = False\n        \n        siemplify.LOGGER.info(\"%s action failed.\" % GET_ANALYSIS_ARCHIVE_SCRIPT_NAME)\n        siemplify.LOGGER.info(\"\\n  status: %s\\n  result_value: %s\\n  output_message: %s\" % (status, result_value, output_message))\n        \n        siemplify.end(output_message, result_value, status)\n    \n    siemplify.LOGGER.info(\"----------------- Main - Started -----------------\")\n    \n    # Initializing VMRay API Instance\n    vmray = VMRay(siemplify.LOGGER, VMRayConfig)\n    \n    try:\n        # Authenticating VMRay API\n        vmray.authenticate()\n        \n        # Doing healtcheck for VMRay API endpoint\n        vmray.healthcheck()\n        \n        if is_analysis_id_set:\n            analysis_archive = vmray.get_analysis_archive(analysis_id)\n\n            if analysis_archive is None:\n                # used to flag back to siemplify system, the action final status\n                status = EXECUTION_STATE_FAILED\n\n                # human readable message, showed in UI as the action result\n                output_message = \"Error occured when retrieving analysis archive for analysis %s\" % analysis_id\n\n                # Set a simple result value, used for playbook if\\else and placeholders.\n                result_value = False\n\n                siemplify.LOGGER.error(\"%s action finished with error.\" % GET_ANALYSIS_ARCHIVE_SCRIPT_NAME)\n            else:\n                siemplify.result.add_link(\"Download Analysis Archive\",\n                                      build_analysis_archive_download_url(vmray.config.URL, vmray.config.ANALYSIS_ARCHIVE_DOWNLOAD_URL % analysis_id))\n\n                if sys.getsizeof(analysis_archive) / 1000000 < 5:\n                    siemplify.result.add_attachment(title=\"Analysis Archive\", \n                                                    filename=\"analysis_archive_%s.zip\" % analysis_id, \n                                                    file_contents=binary_to_base64(analysis_archive))\n                    \n                    # used to flag back to siemplify system, the action final status\n                    status = EXECUTION_STATE_COMPLETED  \n                \n                    # human readable message, showed in UI as the action result\n                    output_message = \"Analysis archive retrieved successfully for %s.\" % analysis_id\n                \n                    # Set a simple result value, used for playbook if\\else and placeholders.\n                    result_value = True\n            \n                    siemplify.LOGGER.info(\"%s action finished successfully.\" % GET_ANALYSIS_ARCHIVE_SCRIPT_NAME)\n                else:\n                    # used to flag back to siemplify system, the action final status\n                    status = EXECUTION_STATE_COMPLETED  \n                \n                    # human readable message, showed in UI as the action result\n                    output_message = \"Analysis archive retrieved successfully for %s. But file size is bigger than 5MB.\" % analysis_id\n                \n                    # Set a simple result value, used for playbook if\\else and placeholders.\n                    result_value = True\n            \n                    siemplify.LOGGER.info(\"%s action finished successfully.\" % GET_ANALYSIS_ARCHIVE_SCRIPT_NAME)\n        else:\n            # Retrieving sample submissions with given sample_id\n            sample_submissions = vmray.get_sample_submissions(sample_id)\n            \n            # Checking and parsing sample IOCs\n            if sample_submissions is not None:\n                \n                # Find latest finished and suitable submsission\n                last_submission = None\n                for submission in sample_submissions:\n                    if submission[\"submission_finished\"] and submission['submission_verdict'] in vmray.config.SELECTED_VERDICTS:\n                        last_submission = submission\n                        break\n                \n                if last_submission is not None:\n                    submission_id = last_submission[\"submission_id\"]\n                    sample_analyses = vmray.get_submission_analyses(submission_id)\n                    \n                    if sample_analyses is not None:\n                        last_analysis = sample_analyses[0]\n                        analysis_id = last_analysis[\"analysis_id\"]\n                        analysis_archive = vmray.get_analysis_archive(analysis_id)\n\n                        if analysis_archive is None:\n                            # used to flag back to siemplify system, the action final status\n                            status = EXECUTION_STATE_FAILED\n\n                            # human readable message, showed in UI as the action result\n                            output_message = \"Error occured when retrieving analysis archive for analysis %s\" % analysis_id\n\n                            # Set a simple result value, used for playbook if\\else and placeholders.\n                            result_value = False\n\n                            siemplify.LOGGER.error(\"%s action finished with error.\" % GET_ANALYSIS_ARCHIVE_SCRIPT_NAME)\n                        \n                        else:\n                            siemplify.result.add_link(\"Download Analysis Archive\",\n                                      build_analysis_archive_download_url(vmray.config.URL, vmray.config.ANALYSIS_ARCHIVE_DOWNLOAD_URL % analysis_id))\n\n                            if sys.getsizeof(analysis_archive) / 1000000 < 5:\n                                siemplify.result.add_attachment(title=\"Analysis Archive\", \n                                                                filename=\"analysis_archive_%s\" % analysis_id, \n                                                                file_contents=binary_to_base64(analysis_archive))\n                        \n                                # used to flag back to siemplify system, the action final status\n                                status = EXECUTION_STATE_COMPLETED  \n                            \n                                # human readable message, showed in UI as the action result\n                                output_message = \"Analysis archive retrieved successfully for %s.\" % analysis_id\n                            \n                                # Set a simple result value, used for playbook if\\else and placeholders.\n                                result_value = True\n\n                                siemplify.LOGGER.info(\"%s action finished successfully.\" % GET_ANALYSIS_ARCHIVE_SCRIPT_NAME)\n                            \n                            else:\n                                # used to flag back to siemplify system, the action final status\n                                status = EXECUTION_STATE_COMPLETED  \n                            \n                                # human readable message, showed in UI as the action result\n                                output_message = \"Analysis archive retrieved successfully for %s. But file size is bigger than 5MB.\" % analysis_id\n                            \n                                # Set a simple result value, used for playbook if\\else and placeholders.\n                                result_value = True\n                        \n                                siemplify.LOGGER.info(\"%s action finished successfully.\" % GET_ANALYSIS_ARCHIVE_SCRIPT_NAME)\n                    else:\n                        # used to flag back to siemplify system, the action final status\n                        status = EXECUTION_STATE_FAILED  \n                    \n                        # human readable message, showed in UI as the action result\n                        output_message = \"No analyses was found for submission %s\" % submission_id\n                    \n                        # Set a simple result value, used for playbook if\\else and placeholders.\n                        result_value = False\n                        \n                        siemplify.LOGGER.info(\"%s action failed.\" % GET_ANALYSIS_ARCHIVE_SCRIPT_NAME)\n                else:\n                    # used to flag back to siemplify system, the action final status\n                    status = EXECUTION_STATE_FAILED  \n                \n                    # human readable message, showed in UI as the action result\n                    output_message = \"No suitable submission was found for sample %s\" % sample_id\n                \n                    # Set a simple result value, used for playbook if\\else and placeholders.\n                    result_value = False\n                    \n                    siemplify.LOGGER.info(\"%s action failed.\" % GET_ANALYSIS_ARCHIVE_SCRIPT_NAME)\n                \n            else:\n                # used to flag back to siemplify system, the action final status\n                status = EXECUTION_STATE_FAILED  \n            \n                # human readable message, showed in UI as the action result\n                output_message = \"No submission was found for sample %s\" % sample_id\n            \n                # Set a simple result value, used for playbook if\\else and placeholders.\n                result_value = False\n                \n                siemplify.LOGGER.info(\"%s action failed.\" % GET_ANALYSIS_ARCHIVE_SCRIPT_NAME)\n    except Exception as err:\n        # used to flag back to siemplify system, the action final status\n        status = EXECUTION_STATE_FAILED\n        \n        # human readable message, showed in UI as the action result\n        output_message = \"Error occured when retrieving analysis archive for sample %s. Error: %s\" % (sample_id, err)\n        \n        # Set a simple result value, used for playbook if\\else and placeholders.\n        result_value = False\n        \n        siemplify.LOGGER.error(\"%s action finished with error.\" % GET_ANALYSIS_ARCHIVE_SCRIPT_NAME)\n        siemplify.LOGGER.exception(err)\n\n    siemplify.LOGGER.info(\"----------------- Main - Finished -----------------\")\n\n    siemplify.LOGGER.info(\"\\n  status: %s\\n  result_value: %s\\n  output_message: %s\" % (status, result_value, output_message))\n    siemplify.end(output_message, result_value, status)\n\n\nif __name__ == \"__main__\":\n    main()\n","IntegrationIdentifier":"VMRayCustomIntegration","ScriptResultName":"is_success","DynamicResultsMetadata":[{"ResultName":"JsonResult","ResultExample":"{}","ShowResult":false}],"Creator":"dfe2ce81-dcad-4920-9dd4-7f9876a5abea","IsEnabled":true,"IsCustom":true,"IsSystem":false,"Version":9.0,"TimeoutSeconds":60,"IsAsync":false,"AsyncPollingIntervalInSeconds":3600,"TotalIntervalTimeoutForAsyncInSeconds":86400,"Parameters":[{"CustomActionId":0,"IsMandatory":false,"DefaultValue":null,"Description":"Identifier of submitted sample","Name":"SAMPLE_ID","Value":null,"Type":0,"OptionalValues":null,"OptionalValuesJson":null},{"CustomActionId":0,"IsMandatory":false,"DefaultValue":null,"Description":"Identifier of analysis of submitted sample","Name":"ANALYSIS_ID","Value":null,"Type":0,"OptionalValues":null,"OptionalValuesJson":null}],"DefaultResultValue":"Get Analysis Archive Action timeout exceeded.","PythonVersion":"None","SimulationData":{"Entities":null},"SimulationDataJson":null}