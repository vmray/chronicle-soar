{"Name":"Submit URL","Description":"Submit suspicious URL to VMRay Analyzer and retrieve submission information","Script":"# Import built-in libraries\nimport json\nimport sys\n\n# Import Siemplify libraries\nfrom SiemplifyAction import SiemplifyAction\nfrom SiemplifyUtils import output_handler\nfrom ScriptResult import EXECUTION_STATE_COMPLETED, EXECUTION_STATE_FAILED, EXECUTION_STATE_INPROGRESS\n\n# Import conntector related libraries\nfrom Conf import INTEGRATION_NAME, SUBMIT_URL_SCRIPT_NAME, VMRayConfig\nfrom UtilsManager import csv_to_list\nfrom VMRayApiManager import VMRay\n\n\ndef start_operation(siemplify, vmray, sample_url):\n    \"\"\"\n    Submit given url to the VMRay\n    :param siemplify: instance of SiemplifyAction to interact Siemplify REST API\n    :param vmray: instance of VMRayApiManager to interact VMRay REST API\n    :param sample_url: url which will be submitted\n    :raise: when an error occurred on url submission request\n    :return result_value: dict or boolean object which store submission status and result\n    :return status: SiemplifyAction status to define current status of action\n    :return output_message: human-readable message to define action result\n    \"\"\"\n\n    try:\n        # submit url to the VMRay\n        submission = vmray.submit_url(sample_url)\n\n        # check submission object to handle API related errors\n        if submission is not None:\n\n            # set result_value - dict which contains submission status and necessary identifiers (for using in the next iterations)\n            result_value = json.dumps({\"is_finished\":False, \"submission_id\":submission[\"submission_id\"], \"sample_id\":submission[\"sample_id\"]})\n            \n            # set output_message - string which contains success message\n            output_message = \"Url submitted successfully.\"\n\n            # set status - inprogress, because url just uploaded, we need to wait for it to finish\n            status = EXECUTION_STATE_INPROGRESS\n\n            return result_value, status, output_message\n        else:\n            # there is an error about submission\n            siemplify.LOGGER.error(\"Couldn't retrieved results for url: %s\" % sample_url)\n\n            # set necessary variables with error codes and messages\n            output_message = \"Couldn't retrieved submission results.\"\n            result_value = False\n            status = EXECUTION_STATE_FAILED\n\n            return result_value, status, output_message\n    except Exception as err:\n        # we got an exception when submitting the sample\n        siemplify.LOGGER.error(\"Couldn't submitted the url: %s\" % sample_url)\n        siemplify.LOGGER.exception(err)\n\n        # set necessary variables with error codes and messages\n        output_message = \"Url submission failed. Error: %s\" % err\n        result_value = False\n        status = EXECUTION_STATE_FAILED\n        \n        return result_value, status, output_message\n\n\ndef query_operation_status(siemplify, vmray, result_data):\n    \"\"\"\n    Query result of the submission\n    :param siemplify: instance of SiemplifyAction to interact Siemplify REST API\n    :param vmray: instance of VMRayApiManager to interact VMRay REST API\n    :param result_data: dict object which store submission status and result (from the iteration before)\n    :raise: when an error occurred on querying submission status\n    :return result_value: dict or boolean object which store submission status and result\n    :return status: SiemplifyAction status to define current status of action\n    :return output_message: human-readable message to define action result\n    \"\"\"\n\n    # get submission_id from result_data\n    submission_id = result_data[\"submission_id\"]\n\n    try:\n        # retrieve submission status with submission_id\n        status, result = vmray.is_submission_finished(submission_id)\n\n        if status is None:\n            # check status object to handle API related errors\n            siemplify.LOGGER.error(\"Status check failed for submission %s.\" % submission_id)\n\n            # set necessary variables with error codes and messages\n            output_message = \"Status check failed for submission %s.\" % submission_id\n            result_value = False\n            status = EXECUTION_STATE_FAILED\n            \n            return result_value, status, output_message\n\n        if status:\n            # submission finished successfully\n            siemplify.LOGGER.info(\"Submission %s finished.\" % submission_id)\n\n            # retrieve verdict from submission result\n            result_data[\"verdict\"] = result[\"submission_verdict\"]\n\n            # set submission status as finished\n            result_data[\"is_finished\"] = True\n\n            # set necessary variables with success codes and messages\n            output_message = \"Submission %s finished.\" % submission_id\n            result_value = True\n            status = EXECUTION_STATE_COMPLETED\n            \n            # add result_value dict to action result\n            siemplify.result.add_result_json(json.dumps(result_data))\n\n            return result_value, status, output_message\n    \n        else:\n            # submission still in progress\n            siemplify.LOGGER.info(\"Submission %s is running.\" % submission_id)\n\n            # set necessary variables with status codes and messages\n            output_message = \"Submission %s is running.\" % submission_id\n            result_value = json.dumps(result_data)\n            status = EXECUTION_STATE_INPROGRESS\n            \n            # add result_value dict to action result\n            siemplify.result.add_result_json(result_value)\n\n            return result_value, status, output_message\n\n    except Exception as err:\n        # we got an exception when querying the result of the sample\n        siemplify.LOGGER.error(\"Couldn't check the status of submision: %s\" % submission_id)\n        siemplify.LOGGER.exception(err)\n\n        # set necessary variables with error codes and messages\n        output_message = \"Query operation failed for submission %s. Error: %s\" % (submission_id, err)\n        result_value = False\n        status = EXECUTION_STATE_FAILED\n        \n        return result_value, status, output_message\n\n@output_handler\ndef main(is_first_run):\n    siemplify = SiemplifyAction()\n    siemplify.script_name = SUBMIT_URL_SCRIPT_NAME\n\n    siemplify.LOGGER.info(\"----------------- Main - Param Init -----------------\")\n\n    # initializing integration parameters for Submit Url Action\n    api_key = siemplify.extract_configuration_param(provider_name=INTEGRATION_NAME, \n                                                    param_name=\"API_KEY\",\n                                                    input_type=str,\n                                                    is_mandatory=True,\n                                                    print_value=False)\n    url = siemplify.extract_configuration_param(provider_name=INTEGRATION_NAME,\n                                                param_name=\"URL\",\n                                                input_type=str,\n                                                is_mandatory=True,\n                                                print_value=True)\n    ssl_verify = siemplify.extract_configuration_param(provider_name=INTEGRATION_NAME, \n                                                       param_name=\"SSL_VERIFY\",\n                                                       input_type=bool,\n                                                       is_mandatory=True,\n                                                       print_value=True)\n    \n    # initializing action specific parameters for Submit Sample Action\n    sample_url = siemplify.extract_action_param(param_name=\"URL\",\n                                                input_type=str,\n                                                is_mandatory=True,\n                                                print_value=True)\n    submission_comment = siemplify.extract_action_param(param_name=\"SUBMISSION_COMMENT\",\n                                                input_type=str,\n                                                is_mandatory=False,\n                                                print_value=True)\n    tags = siemplify.extract_action_param(param_name=\"TAGS\",\n                                                input_type=str,\n                                                is_mandatory=False,\n                                                print_value=True)\n    analysis_timeout = siemplify.extract_action_param(param_name=\"ANALYSIS_TIMEOUT\",\n                                                input_type=str,\n                                                is_mandatory=False,\n                                                print_value=True)\n    analyzer_mode = siemplify.extract_action_param(param_name=\"ANALYZER_MODE\",\n                                                input_type=str,\n                                                is_mandatory=False,\n                                                print_value=True)\n\n    VMRayConfig.API_KEY = api_key\n    VMRayConfig.URL = url\n    VMRayConfig.SSL_VERIFY = ssl_verify\n\n    # check and initialize given parameters to config\n    if submission_comment is not None and len(submission_comment) > 0:\n        VMRayConfig.SUBMISSION_COMMENT = submission_comment\n    \n    if tags is not None and len(csv_to_list(tags)) > 0:\n        VMRayConfig.SUBMISSION_TAGS =  csv_to_list(tags)\n    \n    if analysis_timeout is not None and analysis_timeout.isnumeric():\n        VMRayConfig.ANALYSIS_TIMEOUT =  int(analysis_timeout)\n        \n    if analyzer_mode is not None and len(analyzer_mode) > 0:\n        VMRayConfig.ANALYZER_MODE =  analyzer_mode\n\n    siemplify.LOGGER.info(\"----------------- Main - Started -----------------\")\n\n    # set default values to status variables\n    output_message = \"\"\n    result_value = False\n    status = EXECUTION_STATE_INPROGRESS\n\n    # Initializing VMRay API Instance\n    vmray = VMRay(siemplify.LOGGER, VMRayConfig)\n\n    try:\n        # Authenticating VMRay API\n        vmray.authenticate()\n\n        # Doing healtcheck for VMRay API endpoint\n        vmray.healthcheck()\n\n        if is_first_run:\n            # If it is the first run of the action, we need to sumbit url\n            result_value, status, output_message = start_operation(siemplify, vmray, sample_url)\n        \n        if status == EXECUTION_STATE_INPROGRESS:\n            # If the action has started and is still running, the sample has already been sent\n\n            # so we need to retrieve result from the iteration before with using additional_data parameter\n            result_data = result_value if result_value else siemplify.extract_action_param(param_name=\"additional_data\", default_value='{}')\n            \n            # query status of submission\n            result_value, status, output_message = query_operation_status(siemplify, vmray, json.loads(result_data))\n\n    except Exception as err:\n        # we got an exception when doing API requests\n        siemplify.LOGGER.error(\"Error executing action %s.\" % SUBMIT_URL_SCRIPT_NAME)\n        siemplify.LOGGER.exception(err)\n\n        # set necessary variables with error codes and messages\n        output_message = \"Error executing action %s. Reason: %s\" % (SUBMIT_URL_SCRIPT_NAME, str(err))\n        result_value = False\n        status = EXECUTION_STATE_FAILED\n\n    siemplify.LOGGER.info(\"----------------- Main - Finished -----------------\")\n\n    siemplify.LOGGER.info(\"\\n  status: %s\\n  result_value: %s\\n  output_message: %s\" % (status, result_value, output_message))\n    siemplify.end(output_message, result_value, status)\n\nif __name__ == \"__main__\":\n    is_first_run = len(sys.argv) < 3 or sys.argv[2] == \"True\"\n    main(is_first_run)","IntegrationIdentifier":"VMRayCustomIntegration","ScriptResultName":"is_success","DynamicResultsMetadata":[{"ResultName":"JsonResult","ResultExample":"{\"is_finished\": true, \"submission_id\": 10458497, \"sample_id\": 8691731, \"verdict\": \"malicious\"}","ShowResult":true}],"Creator":"dfe2ce81-dcad-4920-9dd4-7f9876a5abea","IsEnabled":true,"IsCustom":true,"IsSystem":false,"Version":12.0,"TimeoutSeconds":600,"IsAsync":true,"AsyncPollingIntervalInSeconds":60,"TotalIntervalTimeoutForAsyncInSeconds":3600,"Parameters":[{"CustomActionId":0,"IsMandatory":true,"DefaultValue":"DEFAULT_VALUE","Description":"Url value which will be analyzed","Name":"URL","Value":"DEFAULT_VALUE","Type":0,"OptionalValues":null,"OptionalValuesJson":null},{"CustomActionId":0,"IsMandatory":false,"DefaultValue":null,"Description":"Comment for submission","Name":"SUBMISSION_COMMENT","Value":null,"Type":0,"OptionalValues":null,"OptionalValuesJson":null},{"CustomActionId":0,"IsMandatory":false,"DefaultValue":null,"Description":"Tags for submission (comma seperated string)","Name":"TAGS","Value":null,"Type":0,"OptionalValues":null,"OptionalValuesJson":null},{"CustomActionId":0,"IsMandatory":false,"DefaultValue":"120","Description":"VMRay analysis timeout value (seconds)","Name":"ANALYSIS_TIMEOUT","Value":"120","Type":0,"OptionalValues":null,"OptionalValuesJson":null},{"CustomActionId":0,"IsMandatory":false,"DefaultValue":"reputation_static_dynamic","Description":"VMRay analyzer mode for sample\n\n- reputation\n- reputation_static\n- reputation_static_dynamic\n- static_dynamic\n- static","Name":"ANALYZER_MODE","Value":"reputation_static_dynamic","Type":0,"OptionalValues":null,"OptionalValuesJson":null}],"DefaultResultValue":"Submit URL Action timeout exceeded.","PythonVersion":"None","SimulationData":{"Entities":null},"SimulationDataJson":null}