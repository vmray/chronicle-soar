{"Name":"Submit Hash","Description":"Submit hash of the suspicious file to retrieve sample information","Script":"# Import built-in libraries\nimport json\n\n# Import Siemplify libraries\nfrom SiemplifyAction import SiemplifyAction\nfrom SiemplifyUtils import output_handler\nfrom ScriptResult import EXECUTION_STATE_COMPLETED, EXECUTION_STATE_FAILED\n\n# Import conntector related libraries\nfrom Conf import VMRayConfig, INTEGRATION_NAME, SUBMIT_HASH_SCRIPT_NAME\nfrom VMRayApiManager import VMRay\n\n\n@output_handler\ndef main():\n    siemplify = SiemplifyAction()\n    siemplify.script_name = SUBMIT_HASH_SCRIPT_NAME\n    \n    siemplify.LOGGER.info(\"----------------- Main - Param Init -----------------\")\n    \n    # Initializing integration parameters for Submit Hash Action\n    api_key = siemplify.extract_configuration_param(provider_name=INTEGRATION_NAME, \n                                                    param_name=\"API_KEY\",\n                                                    input_type=str,\n                                                    is_mandatory=True,\n                                                    print_value=False)\n    url = siemplify.extract_configuration_param(provider_name=INTEGRATION_NAME,\n                                                param_name=\"URL\",\n                                                input_type=str,\n                                                is_mandatory=True,\n                                                print_value=True)\n    ssl_verify = siemplify.extract_configuration_param(provider_name=INTEGRATION_NAME, \n                                                       param_name=\"SSL_VERIFY\",\n                                                       input_type=bool,\n                                                       is_mandatory=True,\n                                                       print_value=True)\n    \n    # initializing action specific parameters for Submit Hash Action\n    hash_value = siemplify.extract_action_param(param_name=\"HASH\",\n                                                input_type=str,\n                                                is_mandatory=True,\n                                                print_value=True)\n    \n    VMRayConfig.API_KEY = api_key\n    VMRayConfig.URL = url\n    VMRayConfig.SSL_VERIFY = ssl_verify\n    \n    siemplify.LOGGER.info(\"----------------- Main - Started -----------------\")\n    \n    # Initializing VMRay API Instance\n    vmray = VMRay(siemplify.LOGGER, VMRayConfig)\n    \n    try:\n        # Authenticating VMRay API\n        vmray.authenticate()\n        \n        # Doing healtcheck for VMRay API endpoint\n        vmray.healthcheck()\n        \n        # Retrieving sample info with given hash value\n        sample = vmray.get_sample(hash_value)\n        \n        # Checking and parsing sample data\n        if sample is not None:\n            sample_metadata = vmray.parse_sample_data(sample)\n            \n            # used to flag back to siemplify system, the action final status\n            status = EXECUTION_STATE_COMPLETED  \n        \n            # human readable message, showed in UI as the action result\n            output_message = \"Sample retrieved successfully for %s\" % hash_value\n        \n            # Set a simple result value, used for playbook if\\else and placeholders.\n            result_value = True\n            \n            # Adding sample metadata to result json\n            siemplify.result.add_result_json(json.dumps({\"sample\":sample_metadata}))\n\n            siemplify.LOGGER.info(\"%s action finished successfully.\" % SUBMIT_HASH_SCRIPT_NAME)\n        else:\n            # used to flag back to siemplify system, the action final status\n            status = EXECUTION_STATE_FAILED  \n        \n            # human readable message, showed in UI as the action result\n            output_message = \"Hash %s not found in VMRay database.\" % hash_value\n        \n            # Set a simple result value, used for playbook if\\else and placeholders.\n            result_value = False\n            \n            siemplify.LOGGER.info(\"%s action failed.\" % SUBMIT_HASH_SCRIPT_NAME)\n    except Exception as err:\n        # used to flag back to siemplify system, the action final status\n        status = EXECUTION_STATE_FAILED\n        \n        # human readable message, showed in UI as the action result\n        output_message = \"Hash %s not found in VMRay database. Error: %s\" % (hash_value, err)\n        \n        # Set a simple result value, used for playbook if\\else and placeholders.\n        result_value = False\n        \n        siemplify.LOGGER.error(\"%s action finished with error.\" % SUBMIT_HASH_SCRIPT_NAME)\n        siemplify.LOGGER.exception(err)\n    \n    siemplify.LOGGER.info(\"----------------- Main - Finished -----------------\")\n\n    siemplify.LOGGER.info(\"\\n  status: %s\\n  result_value: %s\\n  output_message: %s\" % (status, result_value, output_message))\n    siemplify.end(output_message, result_value, status)\n\n\nif __name__ == \"__main__\":\n    main()\n","IntegrationIdentifier":"VMRayCustomIntegration","ScriptResultName":"is_success","DynamicResultsMetadata":[{"ResultName":"JsonResult","ResultExample":"{\"sample\": {\"sample_id\": 8687746, \"sample_verdict\": \"malicious\", \"sample_vti_score\": 100, \"sample_severity\": \"malicious\", \"sample_md5hash\": \"1004adcc93283bf29d1d9d61cddb20a6\", \"sample_sha1hash\": \"9428cb142239e52f23d49467942caf9759d72fba\", \"sample_sha256hash\": \"9347eadbf16fa120b6bb6cdddab007bd31fdef3c189c74a32f3de544416dfdba\", \"sample_webif_url\": \"https://cloud.vmray.com/samples/8687746\", \"sample_classifications\": [\"Spyware\"], \"sample_threat_names\": [\"Gen:Variant.Lazy.251676\", \"Gen:Variant.Razy.762033\", \"Gen:Variant.Tedy.141835\", \"Lokibot\", \"Lokibot.v2\", \"Trojan.PWS.ZKD\"]}}","ShowResult":true}],"Creator":"dfe2ce81-dcad-4920-9dd4-7f9876a5abea","IsEnabled":true,"IsCustom":true,"IsSystem":false,"Version":6.0,"TimeoutSeconds":60,"IsAsync":false,"AsyncPollingIntervalInSeconds":3600,"TotalIntervalTimeoutForAsyncInSeconds":86400,"Parameters":[{"CustomActionId":0,"IsMandatory":true,"DefaultValue":"DEFAULT_VALUE","Description":"Hash value of sample","Name":"HASH","Value":"DEFAULT_VALUE","Type":0,"OptionalValues":null,"OptionalValuesJson":null}],"DefaultResultValue":"Sumbit Hash Action timeout exceeded.","PythonVersion":"None","SimulationData":{"Entities":null},"SimulationDataJson":null}