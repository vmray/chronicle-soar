{"Name":"Ping","Description":"Check availability and authentication status for the VMRay API","Script":"# Import Siemplify libraries\nfrom SiemplifyAction import SiemplifyAction\nfrom SiemplifyUtils import output_handler\nfrom ScriptResult import EXECUTION_STATE_COMPLETED, EXECUTION_STATE_FAILED\n\n# Import conntector related libraries\nfrom Conf import VMRayConfig, INTEGRATION_NAME, PING_SCRIPT_NAME\nfrom VMRayApiManager import VMRay\n\n\n@output_handler\ndef main():\n    siemplify = SiemplifyAction()\n    siemplify.script_name = PING_SCRIPT_NAME\n    \n    siemplify.LOGGER.info(\"----------------- Main - Param Init -----------------\")\n    \n    # Initializing integration parameters for Ping Action\n    api_key = siemplify.extract_configuration_param(provider_name=INTEGRATION_NAME, \n                                                    param_name=\"API_KEY\",\n                                                    input_type=str,\n                                                    is_mandatory=True,\n                                                    print_value=False)\n    url = siemplify.extract_configuration_param(provider_name=INTEGRATION_NAME,\n                                                param_name=\"URL\",\n                                                input_type=str,\n                                                is_mandatory=True,\n                                                print_value=True)\n    ssl_verify = siemplify.extract_configuration_param(provider_name=INTEGRATION_NAME, \n                                                       param_name=\"SSL_VERIFY\",\n                                                       input_type=bool,\n                                                       is_mandatory=True,\n                                                       print_value=True)\n    \n    VMRayConfig.API_KEY = api_key\n    VMRayConfig.URL = url\n    VMRayConfig.SSL_VERIFY = ssl_verify\n    \n    siemplify.LOGGER.info(\"----------------- Main - Started -----------------\")\n    \n    # Initializing VMRay API Instance\n    vmray = VMRay(siemplify.LOGGER, VMRayConfig)\n    \n    try:\n        # Authenticating VMRay API\n        vmray.authenticate()\n        \n        # Doing healtcheck for VMRay API endpoint\n        vmray.healthcheck()\n        \n        # used to flag back to siemplify system, the action final status\n        status = EXECUTION_STATE_COMPLETED  \n        \n        # human readable message, showed in UI as the action result\n        output_message = \"Authentication and Healthcheck successfully completed.\"\n        \n        # Set a simple result value, used for playbook if\\else and placeholders.\n        result_value = True\n        \n        siemplify.LOGGER.info(\"%s action finished successfully.\" % PING_SCRIPT_NAME)\n    except Exception as err:\n        # used to flag back to siemplify system, the action final status\n        status = EXECUTION_STATE_FAILED\n        \n        # human readable message, showed in UI as the action result\n        output_message = \"Authentication and Healthcheck failed. Error: %s\" % (err)\n        \n        # Set a simple result value, used for playbook if\\else and placeholders.\n        result_value = False\n        \n        siemplify.LOGGER.error(\"%s action finished with error.\" % PING_SCRIPT_NAME)\n        siemplify.LOGGER.exception(err)\n    \n    siemplify.LOGGER.info(\"----------------- Main - Finished -----------------\")\n\n    siemplify.LOGGER.info(\"\\n  status: %s\\n  result_value: %s\\n  output_message: %s\" % (status, result_value, output_message))\n    siemplify.end(output_message, result_value, status)\n\n\nif __name__ == \"__main__\":\n    main()\n","IntegrationIdentifier":"VMRayCustomIntegration","ScriptResultName":"is_success","DynamicResultsMetadata":[{"ResultName":"JsonResult","ResultExample":"{}","ShowResult":false}],"Creator":"dfe2ce81-dcad-4920-9dd4-7f9876a5abea","IsEnabled":true,"IsCustom":true,"IsSystem":false,"Version":6.0,"TimeoutSeconds":60,"IsAsync":false,"AsyncPollingIntervalInSeconds":3600,"TotalIntervalTimeoutForAsyncInSeconds":86400,"Parameters":[],"DefaultResultValue":"Ping Action timeout exceeded.","PythonVersion":"None","SimulationData":{"Entities":null},"SimulationDataJson":null}