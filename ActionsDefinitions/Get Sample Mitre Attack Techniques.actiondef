{"Name":"Get Sample Mitre Attack Techniques","Description":"Retrieve MITRE ATT&CK Techniques for a given sample id","Script":"# Import built-in libraries\nimport json\n\n# Import Siemplify libraries\nfrom SiemplifyAction import SiemplifyAction\nfrom SiemplifyUtils import output_handler\nfrom SiemplifyDataModel import InsightSeverity, InsightType\nfrom ScriptResult import EXECUTION_STATE_COMPLETED, EXECUTION_STATE_FAILED\n\n# Import conntector related libraries\nfrom Conf import VMRayConfig, INTEGRATION_NAME, GET_SAMPLE_ATTACK_SCRIPT_NAME\nfrom VMRayApiManager import VMRay\n\n\ndef prepare_techniques_for_insight(response_dict):\n    message = \"<br>\"\n    for technique in response_dict:\n        technique_text = \"<strong>%s - %s</strong>\\n\" % (technique[\"technique_id\"],technique[\"technique\"])\n        technique_text += \"<strong>Tactics</strong>: %s\\n\" % \",\".join(technique[\"tactics\"])\n        technique_text += \"<strong>VTI's</strong>: %s\\n\" % \",\".join(technique[\"vtis\"].keys())\n        message += technique_text + \"<hr>\"\n    return message\n\n\n@output_handler\ndef main():\n    siemplify = SiemplifyAction()\n    siemplify.script_name = GET_SAMPLE_ATTACK_SCRIPT_NAME\n    \n    siemplify.LOGGER.info(\"----------------- Main - Param Init -----------------\")\n    \n    # Initializing integration parameters for Get Sample Mitre Att&ck Techniques Action\n    api_key = siemplify.extract_configuration_param(provider_name=INTEGRATION_NAME, \n                                                    param_name=\"API_KEY\",\n                                                    input_type=str,\n                                                    is_mandatory=True,\n                                                    print_value=False)\n    url = siemplify.extract_configuration_param(provider_name=INTEGRATION_NAME,\n                                                param_name=\"URL\",\n                                                input_type=str,\n                                                is_mandatory=True,\n                                                print_value=True)\n    ssl_verify = siemplify.extract_configuration_param(provider_name=INTEGRATION_NAME, \n                                                       param_name=\"SSL_VERIFY\",\n                                                       input_type=bool,\n                                                       is_mandatory=True,\n                                                       print_value=True)\n    \n    # initializing action specific parameters for Get Sample Mitre Att&ck Techniques Action\n    sample_id = siemplify.extract_action_param(param_name=\"SAMPLE_ID\",\n                                                input_type=str,\n                                                is_mandatory=True,\n                                                print_value=True)\n    create_insight = siemplify.extract_action_param(param_name=\"CREATE_INSIGHT\",\n                                                input_type=bool,\n                                                is_mandatory=False,\n                                                print_value=True)\n                                                \n    VMRayConfig.API_KEY = api_key\n    VMRayConfig.URL = url\n    VMRayConfig.SSL_VERIFY = ssl_verify\n    \n    siemplify.LOGGER.info(\"----------------- Main - Started -----------------\")\n    \n    # Initializing VMRay API Instance\n    vmray = VMRay(siemplify.LOGGER, VMRayConfig)\n    \n    try:\n        # Authenticating VMRay API\n        vmray.authenticate()\n        \n        # Doing healtcheck for VMRay API endpoint\n        vmray.healthcheck()\n        \n        # Retrieving sample attack techniques with given sample_id\n        sample_attack_techniques = vmray.get_sample_mitre_attack_techniques(sample_id)\n        \n        # Checking and parsing sample attack techniques\n        if sample_attack_techniques is not None:\n            \n            # Parsing sample attack techniques\n            parsed_attack_techniques = vmray.parse_sample_mitre_attack_techniques(sample_attack_techniques)\n            \n            # used to flag back to siemplify system, the action final status\n            status = EXECUTION_STATE_COMPLETED  \n        \n            # human readable message, showed in UI as the action result\n            output_message = \"Sample Mitre ATT&CK techniques retrieved successfully for %s\" % sample_id\n        \n            # Set a simple result value, used for playbook if\\else and placeholders.\n            result_value = True\n            \n            # Adding sample metadata to result json\n            siemplify.result.add_result_json(json.dumps({\"sample_technqiues\":parsed_attack_techniques}))\n            \n            if create_insight:\n                siemplify.LOGGER.info(\"Creating case insight for found MITRE ATT&CK Techniques.\")\n                \n                title = \"MITRE ATT&CK Techniques for Sample %s\" % sample_id\n                \n                try:\n                    message = prepare_techniques_for_insight(parsed_attack_techniques)\n                \n                    siemplify.create_case_insight(triggered_by=INTEGRATION_NAME,\n                                      title=title,\n                                      content=message,\n                                      entity_identifier=\"\",\n                                      severity=1,\n                                      insight_type=InsightType.General)\n                except Exception as err:\n                    siemplify.LOGGER.error(\"Insight creation failed. Error: %s\" % err)\n            \n            siemplify.LOGGER.info(\"%s action finished successfully.\" % GET_SAMPLE_ATTACK_SCRIPT_NAME)\n        else:\n            # used to flag back to siemplify system, the action final status\n            status = EXECUTION_STATE_FAILED  \n        \n            # human readable message, showed in UI as the action result\n            output_message = \"No attack techniques for %s was found in VMRay database.\" % sample_id\n        \n            # Set a simple result value, used for playbook if\\else and placeholders.\n            result_value = False\n            \n            siemplify.LOGGER.info(\"%s action failed.\" % GET_SAMPLE_ATTACK_SCRIPT_NAME)\n    except Exception as err:\n        # used to flag back to siemplify system, the action final status\n        status = EXECUTION_STATE_FAILED\n        \n        # human readable message, showed in UI as the action result\n        output_message = \"No attack techniques for %s was found in VMRay database. Error: %s\" % (sample_id, err)\n        \n        # Set a simple result value, used for playbook if\\else and placeholders.\n        result_value = False\n        \n        siemplify.LOGGER.error(\"%s action finished with error.\" % GET_SAMPLE_ATTACK_SCRIPT_NAME)\n        siemplify.LOGGER.exception(err)\n\n    siemplify.LOGGER.info(\"----------------- Main - Finished -----------------\")\n\n    siemplify.LOGGER.info(\"\\n  status: %s\\n  result_value: %s\\n  output_message: %s\" % (status, result_value, output_message))\n    siemplify.end(output_message, result_value, status)\n\n\nif __name__ == \"__main__\":\n    main()\n","IntegrationIdentifier":"VMRayCustomIntegration","ScriptResultName":"is_success","DynamicResultsMetadata":[{"ResultName":"JsonResult","ResultExample":"{\"sample_technqiues\": [{\"tactics\": [\"Defense Evasion\"], \"technique\": \"Software Packing\", \"technique_id\": \"T1045\", \"vtis\": {\"Obfuscation\": [{\"classifications\": [], \"operation\": \"Resolves API functions dynamically\", \"score\": 1}]}}, {\"tactics\": [\"Discovery\"], \"technique\": \"File and Directory Discovery\", \"technique_id\": \"T1083\", \"vtis\": {\"Anti Analysis\": [{\"classifications\": [], \"operation\": \"Tries to detect virtual machine\", \"score\": 2}]}}, {\"tactics\": [\"Discovery\"], \"technique\": \"Process Discovery\", \"technique_id\": \"T1057\", \"vtis\": {\"Discovery\": [{\"classifications\": [], \"operation\": \"Enumerates running processes\", \"score\": 1}]}}, {\"tactics\": [\"Discovery\"], \"technique\": \"System Network Configuration Discovery\", \"technique_id\": \"T1016\", \"vtis\": {\"Discovery\": [{\"classifications\": [], \"operation\": \"Reads network adapter information\", \"score\": 2}, {\"classifications\": [], \"operation\": \"Combination of other detections shows configuration discovery\", \"score\": 5}]}}, {\"tactics\": [\"Discovery\"], \"technique\": \"System Information Discovery\", \"technique_id\": \"T1082\", \"vtis\": {\"Discovery\": [{\"classifications\": [], \"operation\": \"Collects hardware properties\", \"score\": 2}, {\"classifications\": [], \"operation\": \"Collects BIOS properties\", \"score\": 2}, {\"classifications\": [], \"operation\": \"Combination of other detections shows configuration discovery\", \"score\": 5}]}}, {\"tactics\": [\"Discovery\"], \"technique\": \"Query Registry\", \"technique_id\": \"T1012\", \"vtis\": {\"Anti Analysis\": [{\"classifications\": [], \"operation\": \"Tries to detect virtual machine\", \"score\": 2}]}}, {\"tactics\": [\"Defense Evasion\", \"Discovery\"], \"technique\": \"Virtualization/Sandbox Evasion\", \"technique_id\": \"T1497\", \"vtis\": {\"Anti Analysis\": [{\"classifications\": [], \"operation\": \"Tries to detect virtual machine\", \"score\": 2}, {\"classifications\": [], \"operation\": \"Tries to detect analyzer sandbox\", \"score\": 1}, {\"classifications\": [], \"operation\": \"Tries to detect application sandbox\", \"score\": 2}]}}, {\"tactics\": [\"Discovery\"], \"technique\": \"System Time Discovery\", \"technique_id\": \"T1124\", \"vtis\": {\"Anti Analysis\": [{\"classifications\": [], \"operation\": \"Tries to detect virtual machine\", \"score\": 2}, {\"classifications\": [], \"operation\": \"Tries to detect analyzer sandbox\", \"score\": 1}]}}, {\"tactics\": [\"Execution\"], \"technique\": \"Windows Management Instrumentation\", \"technique_id\": \"T1047\", \"vtis\": {\"Discovery\": [{\"classifications\": [], \"operation\": \"Reads network adapter information\", \"score\": 2}, {\"classifications\": [], \"operation\": \"Executes WMI query\", \"score\": 2}, {\"classifications\": [], \"operation\": \"Collects hardware properties\", \"score\": 2}, {\"classifications\": [], \"operation\": \"Collects BIOS properties\", \"score\": 2}]}}, {\"tactics\": [\"Discovery\"], \"technique\": \"Application Window Discovery\", \"technique_id\": \"T1010\", \"vtis\": {\"Anti Analysis\": [{\"classifications\": [], \"operation\": \"Tries to detect virtual machine\", \"score\": 2}, {\"classifications\": [], \"operation\": \"Tries to detect debugger\", \"score\": 2}, {\"classifications\": [], \"operation\": \"Tries to detect application sandbox\", \"score\": 2}]}}, {\"tactics\": [\"Defense Evasion\"], \"technique\": \"File System Logical Offsets\", \"technique_id\": \"T1006\", \"vtis\": {\"Defense Evasion\": [{\"classifications\": [], \"operation\": \"Accesses physical drive\", \"score\": 2}]}}, {\"tactics\": [\"Collection\", \"Credential Access\"], \"technique\": \"Input Capture\", \"technique_id\": \"T1056\", \"vtis\": {\"Input Capture\": [{\"classifications\": [], \"operation\": \"Monitors mouse movements and clicks\", \"score\": 1}]}}, {\"tactics\": [\"Privilege Escalation\", \"Credential Access\", \"Persistence\"], \"technique\": \"Hooking\", \"technique_id\": \"T1179\", \"vtis\": {\"Input Capture\": [{\"classifications\": [], \"operation\": \"Monitors mouse movements and clicks\", \"score\": 1}]}}]}\r\n","ShowResult":true}],"Creator":"dfe2ce81-dcad-4920-9dd4-7f9876a5abea","IsEnabled":true,"IsCustom":true,"IsSystem":false,"Version":24.0,"TimeoutSeconds":60,"IsAsync":false,"AsyncPollingIntervalInSeconds":3600,"TotalIntervalTimeoutForAsyncInSeconds":86400,"Parameters":[{"CustomActionId":0,"IsMandatory":true,"DefaultValue":"DEFAULT_VALUE","Description":"Identifier of submitted sample","Name":"SAMPLE_ID","Value":"DEFAULT_VALUE","Type":0,"OptionalValues":null,"OptionalValuesJson":null},{"CustomActionId":0,"IsMandatory":false,"DefaultValue":"false","Description":"Boolean value to determine creation of case insight","Name":"CREATE_INSIGHT","Value":"false","Type":1,"OptionalValues":null,"OptionalValuesJson":null}],"DefaultResultValue":"Get Mitre Attack Techniques Action timeout exceeded.","PythonVersion":"None","SimulationData":{"Entities":null},"SimulationDataJson":null}