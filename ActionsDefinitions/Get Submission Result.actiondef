{"Name":"Get Submission Result","Description":"Retrieve submission status for a given submission id","Script":"# Import built-in libraries\nimport json\n\n# Import Siemplify libraries\nfrom SiemplifyAction import SiemplifyAction\nfrom SiemplifyUtils import output_handler\nfrom ScriptResult import EXECUTION_STATE_COMPLETED, EXECUTION_STATE_FAILED\n\n# Import conntector related libraries\nfrom Conf import VMRayConfig, INTEGRATION_NAME, GET_SUBMISSION_RESULT_SCRIPT_NAME\nfrom VMRayApiManager import VMRay\n\n@output_handler\ndef main():\n    siemplify = SiemplifyAction()\n    siemplify.script_name = GET_SUBMISSION_RESULT_SCRIPT_NAME\n\n    siemplify.LOGGER.info(\"----------------- Main - Param Init -----------------\")\n    \n    # Initializing integration parameters for Get Submission Result Action\n    api_key = siemplify.extract_configuration_param(provider_name=INTEGRATION_NAME, \n                                                    param_name=\"API_KEY\",\n                                                    input_type=str,\n                                                    is_mandatory=True,\n                                                    print_value=False)\n    url = siemplify.extract_configuration_param(provider_name=INTEGRATION_NAME,\n                                                param_name=\"URL\",\n                                                input_type=str,\n                                                is_mandatory=True,\n                                                print_value=True)\n    ssl_verify = siemplify.extract_configuration_param(provider_name=INTEGRATION_NAME, \n                                                       param_name=\"SSL_VERIFY\",\n                                                       input_type=bool,\n                                                       is_mandatory=True,\n                                                       print_value=True)\n    \n    # initializing action specific parameters for Get Submission Result Action\n    submission_id = siemplify.extract_action_param(param_name=\"SUBMISSION_ID\",\n                                                input_type=str,\n                                                is_mandatory=True,\n                                                print_value=True)\n    \n    VMRayConfig.API_KEY = api_key\n    VMRayConfig.URL = url\n    VMRayConfig.SSL_VERIFY = ssl_verify\n\n    siemplify.LOGGER.info(\"----------------- Main - Started -----------------\")\n\n    # Initializing VMRay API Instance\n    vmray = VMRay(siemplify.LOGGER, VMRayConfig)\n\n    try:\n        # Authenticating VMRay API\n        vmray.authenticate()\n\n        # Doing healtcheck for VMRay API endpoint\n        vmray.healthcheck()\n\n        # Retrieve submission info with given submission_id\n        submission = vmray.get_submission(submission_id)\n\n        if submission is not None:\n\n            # Parse and extract necessary fields from submission\n            parsed_submission = vmray.parse_submission(submission)\n\n            # used to flag back to siemplify system, the action final status\n            status = EXECUTION_STATE_COMPLETED  \n\n            # human readable message, showed in UI as the action result\n            output_message = \"Submission info retrieved successfully for %s\" % submission_id\n\n            # Set a simple result value, used for playbook if\\else and placeholders.\n            result_value = True\n\n            # Adding submission result to result json\n            siemplify.result.add_result_json(json.dumps({\"submission\":parsed_submission}))\n\n            siemplify.LOGGER.info(\"%s action finished successfully.\" % GET_SUBMISSION_RESULT_SCRIPT_NAME)\n        else:\n            # used to flag back to siemplify system, the action final status\n            status = EXECUTION_STATE_FAILED\n\n            # human readable message, showed in UI as the action result\n            output_message = \"Submission %s couldn't retrieved from VMRay.\" % submission_id\n\n            # Set a simple result value, used for playbook if\\else and placeholders.\n            result_value = False\n\n            siemplify.LOGGER.info(\"%s action failed.\" % GET_SUBMISSION_RESULT_SCRIPT_NAME)\n    except Exception as err:\n        # used to flag back to siemplify system, the action final status\n        status = EXECUTION_STATE_FAILED\n\n        # human readable message, showed in UI as the action result\n        output_message = \"Submission %s couldn't retrieved from VMRay. Error: %s\" % (submission_id, err)\n        \n        # Set a simple result value, used for playbook if\\else and placeholders.\n        result_value = False\n        \n        siemplify.LOGGER.error(\"%s action finished with error.\" % GET_SUBMISSION_RESULT_SCRIPT_NAME)\n        siemplify.LOGGER.exception(err)\n\n    siemplify.LOGGER.info(\"----------------- Main - Finished -----------------\")\n\n    siemplify.LOGGER.info(\"\\n  status: %s\\n  result_value: %s\\n  output_message: %s\" % (status, result_value, output_message))\n    siemplify.end(output_message, result_value, status)\n\nif __name__ == \"__main__\":\n    main()","IntegrationIdentifier":"VMRayCustomIntegration","ScriptResultName":"is_success","DynamicResultsMetadata":[{"ResultName":"JsonResult","ResultExample":"{\"submission\": {\"submission_created\": \"2022-10-14T09:29:51\", \"submission_finished\": true, \"submission_id\": 10457293, \"submission_original_url\": null, \"submission_original_filename\": null, \"submission_sample_sha256\": \"ecac12520eaa08addb97ed05c2ac1406d56e58eb422954b704ef5c5516e02397\", \"submission_score\": 100, \"submission_severity\": \"malicious\", \"submission_verdict\": \"malicious\", \"submission_webif_url\": \"https://cloud.vmray.com/samples/7623422\"}}\r\n","ShowResult":true}],"Creator":"dfe2ce81-dcad-4920-9dd4-7f9876a5abea","IsEnabled":true,"IsCustom":true,"IsSystem":false,"Version":10.0,"TimeoutSeconds":60,"IsAsync":false,"AsyncPollingIntervalInSeconds":3600,"TotalIntervalTimeoutForAsyncInSeconds":86400,"Parameters":[{"CustomActionId":0,"IsMandatory":true,"DefaultValue":"DEFAULT_VALUE","Description":"Identifier of submission","Name":"SUBMISSION_ID","Value":"DEFAULT_VALUE","Type":0,"OptionalValues":null,"OptionalValuesJson":null}],"DefaultResultValue":"Get Submission Result Action timeout exceeded.","PythonVersion":"None","SimulationData":{"Entities":null},"SimulationDataJson":null}