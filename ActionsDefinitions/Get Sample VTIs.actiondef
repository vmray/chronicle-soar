{"Name":"Get Sample VTIs","Description":"Retrieve VMRay Threat Identifiers for a given sample id","Script":"# Import built-in libraries\nimport json\n\n# Import Siemplify libraries\nfrom SiemplifyAction import SiemplifyAction\nfrom SiemplifyUtils import output_handler\nfrom SiemplifyDataModel import InsightSeverity, InsightType\nfrom ScriptResult import EXECUTION_STATE_COMPLETED, EXECUTION_STATE_FAILED\n\n# Import conntector related libraries\nfrom Conf import VMRayConfig, INTEGRATION_NAME, GET_SAMPLE_VTI_SCRIPT_NAME\nfrom VMRayApiManager import VMRay\nfrom UtilsManager import csv_to_list\n\ndef prepare_vtis_for_insight(response_dict, sample_id):\n    message = \"<br>\"\n    for key in response_dict:\n        message += \"<strong>%s</strong>\\n\" % key\n        for vti in response_dict[key]:\n            vti_text = \"&emsp;<strong>Operation</strong>: %s\\n\" % vti[\"operation\"]\n            vti_text += \"&emsp;<strong>Score</strong>: %s\\n\" % vti[\"score\"]\n            if len(vti[\"classifications\"]) > 0:\n                vti_text += \"&emsp;<strong>Classifications</strong>: %s\\n\" % \",\".join(vti[\"classifications\"])\n        message += vti_text + \"<hr>\"\n        \n    return message\n\n\n@output_handler\ndef main():\n    siemplify = SiemplifyAction()\n    siemplify.script_name = GET_SAMPLE_VTI_SCRIPT_NAME\n    \n    siemplify.LOGGER.info(\"----------------- Main - Param Init -----------------\")\n    \n    # Initializing integration parameters for Get Sample VTI Action\n    api_key = siemplify.extract_configuration_param(provider_name=INTEGRATION_NAME, \n                                                    param_name=\"API_KEY\",\n                                                    input_type=str,\n                                                    is_mandatory=True,\n                                                    print_value=False)\n    url = siemplify.extract_configuration_param(provider_name=INTEGRATION_NAME,\n                                                param_name=\"URL\",\n                                                input_type=str,\n                                                is_mandatory=True,\n                                                print_value=True)\n    ssl_verify = siemplify.extract_configuration_param(provider_name=INTEGRATION_NAME, \n                                                       param_name=\"SSL_VERIFY\",\n                                                       input_type=bool,\n                                                       is_mandatory=True,\n                                                       print_value=True)\n    \n    # initializing action specific parameters for Get Sample VTI Action\n    sample_id = siemplify.extract_action_param(param_name=\"SAMPLE_ID\",\n                                                input_type=str,\n                                                is_mandatory=True,\n                                                print_value=True)\n    min_vti_score = siemplify.extract_action_param(param_name=\"MIN_VTI_SCORE\",\n                                                input_type=str,\n                                                is_mandatory=False,\n                                                print_value=True)\n    create_insight = siemplify.extract_action_param(param_name=\"CREATE_INSIGHT\",\n                                                input_type=bool,\n                                                is_mandatory=False,\n                                                print_value=True)\n                                                \n    VMRayConfig.API_KEY = api_key\n    VMRayConfig.URL = url\n    VMRayConfig.SSL_VERIFY = ssl_verify\n    \n    # check and initialize given parameters to config\n    if min_vti_score is not None and min_vti_score.isnumeric():\n        VMRayConfig.MIN_VTI_SCORE = int(min_vti_score)\n    \n    siemplify.LOGGER.info(\"----------------- Main - Started -----------------\")\n    \n    # Initializing VMRay API Instance\n    vmray = VMRay(siemplify.LOGGER, VMRayConfig)\n    \n    try:\n        # Authenticating VMRay API\n        vmray.authenticate()\n        \n        # Doing healtcheck for VMRay API endpoint\n        vmray.healthcheck()\n        \n        # Retrieving sample VTIs with given sample_id\n        sample_vtis = vmray.get_sample_vtis(sample_id)\n        \n        # Checking and parsing sample vtis\n        if sample_vtis is not None:\n            \n            # Parsing sample VTI values\n            parsed_vtis = vmray.parse_sample_vtis(sample_vtis)\n            \n            # used to flag back to siemplify system, the action final status\n            status = EXECUTION_STATE_COMPLETED  \n        \n            # human readable message, showed in UI as the action result\n            output_message = \"Sample VTIs retrieved successfully for %s\" % sample_id\n        \n            # Set a simple result value, used for playbook if\\else and placeholders.\n            result_value = True\n            \n            # Adding sample metadata to result json\n            siemplify.result.add_result_json(json.dumps({\"sample_vtis\":parsed_vtis}))\n            \n            if create_insight:\n                siemplify.LOGGER.info(\"Creating case insight for found VTI's.\")\n                \n                title = \"VMRay Threat Identifiers for Sample %s\" % sample_id\n                \n                try:\n                    message = prepare_vtis_for_insight(parsed_vtis, sample_id)\n                \n                    siemplify.create_case_insight(triggered_by=INTEGRATION_NAME,\n                                      title=title,\n                                      content=message,\n                                      entity_identifier=\"\",\n                                      severity=1,\n                                      insight_type=InsightType.General)\n                except Exception as err:\n                    siemplify.LOGGER.error(\"Insight creation failed. Error: %s\" % err)\n            \n            siemplify.LOGGER.info(\"%s action finished successfully.\" % GET_SAMPLE_VTI_SCRIPT_NAME)\n        else:\n            # used to flag back to siemplify system, the action final status\n            status = EXECUTION_STATE_FAILED  \n        \n            # human readable message, showed in UI as the action result\n            output_message = \"No VTI for %s was found in VMRay database.\" % sample_id\n        \n            # Set a simple result value, used for playbook if\\else and placeholders.\n            result_value = False\n            \n            siemplify.LOGGER.info(\"%s action failed.\" % GET_SAMPLE_VTI_SCRIPT_NAME)\n    except Exception as err:\n        # used to flag back to siemplify system, the action final status\n        status = EXECUTION_STATE_FAILED\n        \n        # human readable message, showed in UI as the action result\n        output_message = \"No VTI for %s was found in VMRay database. Error: %s\" % (sample_id, err)\n        \n        # Set a simple result value, used for playbook if\\else and placeholders.\n        result_value = False\n        \n        siemplify.LOGGER.error(\"%s action finished with error.\" % GET_SAMPLE_VTI_SCRIPT_NAME)\n        siemplify.LOGGER.exception(err)\n\n    siemplify.LOGGER.info(\"----------------- Main - Finished -----------------\")\n\n    siemplify.LOGGER.info(\"\\n  status: %s\\n  result_value: %s\\n  output_message: %s\" % (status, result_value, output_message))\n    siemplify.end(output_message, result_value, status)\n\n\nif __name__ == \"__main__\":\n    main()\n","IntegrationIdentifier":"VMRayCustomIntegration","ScriptResultName":"is_success","DynamicResultsMetadata":[{"ResultName":"JsonResult","ResultExample":"{\"sample_vtis\": {\"YARA\": [{\"classifications\": [], \"operation\": \"Suspicious content matched by YARA rules\", \"score\": 3}], \"Antivirus\": [{\"classifications\": [], \"operation\": \"Malicious content was detected by heuristic scan\", \"score\": 4}], \"Discovery\": [{\"classifications\": [], \"operation\": \"Combination of other detections shows configuration discovery\", \"score\": 5}]}}\r\n","ShowResult":true}],"Creator":"dfe2ce81-dcad-4920-9dd4-7f9876a5abea","IsEnabled":true,"IsCustom":true,"IsSystem":false,"Version":30.0,"TimeoutSeconds":60,"IsAsync":false,"AsyncPollingIntervalInSeconds":3600,"TotalIntervalTimeoutForAsyncInSeconds":86400,"Parameters":[{"CustomActionId":0,"IsMandatory":true,"DefaultValue":"DEFAULT_VALUE","Description":"Identifier of submitted sample","Name":"SAMPLE_ID","Value":"DEFAULT_VALUE","Type":0,"OptionalValues":null,"OptionalValuesJson":null},{"CustomActionId":0,"IsMandatory":false,"DefaultValue":"3","Description":"Minimum score of retrieved VMRay Threat Identifiers","Name":"MIN_VTI_SCORE","Value":"3","Type":0,"OptionalValues":null,"OptionalValuesJson":null},{"CustomActionId":0,"IsMandatory":false,"DefaultValue":"false","Description":"Boolean value to determine creation of case insight","Name":"CREATE_INSIGHT","Value":"false","Type":1,"OptionalValues":null,"OptionalValuesJson":null}],"DefaultResultValue":"Get Sample VTIs Action timeout exceeded.","PythonVersion":"None","SimulationData":{"Entities":null},"SimulationDataJson":null}